#!/usr/bin/env python
from __future__ import print_function

import os, sys, optparse, subprocess
p = optparse.OptionParser()
p.add_option("--unclean", action='store_true')
opts, args = p.parse_args()
here = os.path.dirname(__file__)

try:
	opam2nix_base = None
	opam2nix_dev = os.path.join(here, '../opam2nix')
	if os.path.exists(os.path.join(opam2nix_dev, 'bin')):
		print('Using development opam2nix', file=sys.stderr)
		opam2nix_base = opam2nix_dev

	opam_repo = os.path.join(here, 'opam-repository')
	if os.path.exists(opam_repo):
		print('Using development opam-repo', file=sys.stderr)
		subprocess.check_call(['gup', '-u', '../nix/release/src-opam-repository.json'])

	cmd = [
		'nix-shell', os.path.join(here, '../shell.nix'),
		'--show-trace',
		'-A', '_generateOfficialPackages',
		'--arg', 'offline', 'false',
		'--argstr', 'digestMap', os.path.join(here, 'digest.json'),
		]

	if opam2nix_base is not None:
		cmd.extend(['--argstr', 'opam2nixBin', opam2nix_base])

	# include_default_packages = True

	if opts.unclean:
		cmd.extend(['--arg', 'unclean', 'true'])
		cmd.extend(['--argstr', 'dest', os.path.join(here, 'packages')])
		packages = args
	else:
		assert len(args) == 2
		subprocess.check_call([
			'gup', '--always'
		])
		dest, target = args
		cmd.extend(['--argstr', 'dest', dest])
		packages = ['*']

	if os.environ.get('CI', 'false') != 'true':
		cmd.extend(['--arg', 'verbose', 'true'])

	cmd.extend(['--arg', 'packages', '[' + ' '.join(['"%s"' % p for p in packages]) + ']'])
	cmd.extend(['--run', 'true'])
	print(repr(cmd), file=sys.stderr)
	subprocess.check_call(cmd)
except subprocess.CalledProcessError:
	sys.exit(1)
