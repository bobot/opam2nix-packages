#!/usr/bin/env python
from __future__ import print_function

import os, sys, optparse, subprocess
p = optparse.OptionParser()
p.add_option("--update", action='store_true')
p.add_option("--dev", action='store_true')
opts, args = p.parse_args()
here = os.path.dirname(__file__)

opam2nix_base = os.path.join(here, ('../opam2nix' if opts.dev else '../opam2nix/local'))

cmd = [
	os.path.join(opam2nix_base, 'bin/opam2nix'),
	'generate',
	'--src', os.path.join(here, '../opam-repository'),
	'--cache', os.path.join(here, '../cache'),
	'--max-age', '7776000',
	'--num-versions', '2',
	'--ignore-broken'
]
if opts.update:
	cmd.extend(['--update', '--dest', os.path.join(here, 'packages')])
	cmd.extend(args)
else:
	assert len(args) == 2
	dest, target = args
	cmd.extend(['--dest', dest])

cmd.append('*')

with open(os.path.join(here, '../packages.repo')) as repo_list:
	for line in repo_list.readlines():
		line = line.strip()
		if line.startswith('#'): continue
		cmd.append(line)

subprocess.check_call([
	'gup', '-u',
	opam2nix_base,
	os.path.join(here, '../packages.repo'),
	os.path.join(here, '../.opam-repository.stamp'),
])
print(repr(cmd), file=sys.stderr)
subprocess.check_call(cmd)
