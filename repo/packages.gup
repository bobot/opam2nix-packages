#!/usr/bin/env python
from __future__ import print_function

import os, sys, optparse, subprocess
p = optparse.OptionParser()
p.add_option("--unclean", action='store_true')
p.add_option("--dev", action='store_true')
opts, args = p.parse_args()
here = os.path.dirname(__file__)

opam2nix_base = None
if opts.dev:
	opam2nix_base = os.path.join(here, '../opam2nix')
elif 'OPAM2NIX_BIN' in os.environ:
	opam2nix_base = os.environ['OPAM2NIX_BIN']
else:
	opam2nix_base = subprocess.check_output(['nix-build', '--no-out-link', '-A', 'opam2nixBin', os.path.join(here, '../shell.nix')]).strip()

cmd = [
	os.path.join(opam2nix_base, 'bin/opam2nix'),
	'generate',
	'--src', os.path.join(here, '../opam-repository'),
	'--digest-map', os.path.join(here, 'digest.json'),
	'--num-versions', '2.3.2',
	'--ignore-broken'
]

include_default_packages = True

if opts.unclean:
	cmd.extend(['--unclean', '--dest', os.path.join(here, 'packages')])
	cmd.extend(args)
	include_default_packages = False
else:
	assert len(args) == 2
	dest, target = args
	cmd.extend(['--dest', dest])

if include_default_packages:
	cmd.append('*')

	with open(os.path.join(here, '../packages.repo')) as repo_list:
		for line in repo_list.readlines():
			line = line.strip()
			if line.startswith('#'): continue
			cmd.append(line)

subprocess.check_call([
	'gup', '-u',
	os.path.join(here, '../packages.repo'),
	os.path.join(here, '../.opam-repository.stamp'),
])
print(repr(cmd), file=sys.stderr)
subprocess.check_call(cmd)
